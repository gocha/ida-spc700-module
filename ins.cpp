/*
 *      Interactive disassembler (IDA).
 *      Version 3.05
 *      Copyright (c) 1990-95 by Ilfak Guilfanov.
 *      ALL RIGHTS RESERVED.
 *                              FIDO:   2:5020/209
 *                              E-mail: ig@estar.msk.su
 *
 */

#include "spc700.hpp"

instruc_t Instructions[] = {

{ "adc",        CF_USE1                         },
{ "addw",       CF_USE1                         },
{ "and",        CF_USE1                         },
{ "and1",       CF_CHG1|CF_USE2                 },
{ "asl",        CF_CHG1|CF_SHFT                 },
{ "bbc0",       CF_USE1|CF_USE2                 },
{ "bbc1",       CF_USE1|CF_USE2                 },
{ "bbc2",       CF_USE1|CF_USE2                 },
{ "bbc3",       CF_USE1|CF_USE2                 },
{ "bbc4",       CF_USE1|CF_USE2                 },
{ "bbc5",       CF_USE1|CF_USE2                 },
{ "bbc6",       CF_USE1|CF_USE2                 },
{ "bbc7",       CF_USE1|CF_USE2                 },
{ "bbs0",       CF_USE1|CF_USE2                 },
{ "bbs1",       CF_USE1|CF_USE2                 },
{ "bbs2",       CF_USE1|CF_USE2                 },
{ "bbs3",       CF_USE1|CF_USE2                 },
{ "bbs4",       CF_USE1|CF_USE2                 },
{ "bbs5",       CF_USE1|CF_USE2                 },
{ "bbs6",       CF_USE1|CF_USE2                 },
{ "bbs7",       CF_USE1|CF_USE2                 },
{ "bcc",        CF_USE1                         },
{ "bcs",        CF_USE1                         },
{ "beq",        CF_USE1                         },
{ "bmi",        CF_USE1                         },
{ "bne",        CF_USE1                         },
{ "bpl",        CF_USE1                         },
{ "bra",        CF_USE1|CF_STOP                 },
{ "brk",        CF_STOP                         },
{ "bvc",        CF_USE1                         },
{ "bvs",        CF_USE1                         },
{ "call",       CF_USE1|CF_CALL                 },
{ "cbne",       CF_USE1|CF_CHG1|CF_USE2         },
{ "clr0",       CF_CHG1                         },
{ "clr1",       CF_CHG1                         },
{ "clr2",       CF_CHG1                         },
{ "clr3",       CF_CHG1                         },
{ "clr4",       CF_CHG1                         },
{ "clr5",       CF_CHG1                         },
{ "clr6",       CF_CHG1                         },
{ "clr7",       CF_CHG1                         },
{ "clrc",       0                               },
{ "clrp",       0                               },
{ "clrv",       0                               },
{ "cmp",        CF_USE1                         },
{ "cmp",        CF_USE1                         },
{ "cmp",        CF_USE1                         },
{ "cmpw",       CF_USE1                         },
{ "daa",        CF_CHG1                         },
{ "das",        CF_CHG1                         },
{ "dbnz",       CF_USE1|CF_CHG1|CF_USE2         },
{ "dec",        CF_USE1|CF_CHG1                 },
{ "dec",        CF_USE1|CF_CHG1                 },
{ "dec",        CF_USE1|CF_CHG1                 },
{ "decw",       CF_USE1|CF_CHG1                 },
{ "di",         0                               },
{ "div",        0                               },
{ "ei",         0                               },
{ "eor",        CF_USE1                         },
{ "eor1",       CF_CHG1|CF_USE2                 },
{ "inc",        CF_USE1|CF_CHG1                 },
{ "inc",        CF_USE1|CF_CHG1                 },
{ "inc",        CF_USE1|CF_CHG1                 },
{ "incw",       CF_USE1|CF_CHG1                 },
{ "jmp",        CF_USE1|CF_STOP                 },
{ "mov",        CF_CHG1|CF_USE2                 },
{ "mov",        CF_CHG1|CF_USE2                 },
{ "mov",        CF_CHG1|CF_USE2                 },
{ "lsr",        CF_CHG1|CF_SHFT                 },
{ "mov",        CF_CHG1|CF_USE2                 },
{ "movw",       CF_CHG1|CF_USE2                 },
{ "mov1",       CF_CHG1|CF_USE2                 },
{ "mul",        0                               },
{ "nop",        0                               },
{ "not1",       CF_CHG1                         },
{ "notc",       0                               },
{ "or",         CF_USE1                         },
{ "or1",        CF_CHG1|CF_USE2                 },
{ "pcall",      CF_USE1|CF_CALL                 },
{ "push",       CF_USE1                         },
{ "push",       CF_USE1                         },
{ "push",       CF_USE1                         },
{ "push",       CF_USE1                         },
{ "pop",        CF_USE1                         },
{ "pop",        CF_USE1                         },
{ "pop",        CF_USE1                         },
{ "pop",        CF_USE1                         },
{ "ret",        CF_STOP                         },
{ "reti",       CF_STOP                         },
{ "rol",        CF_CHG1|CF_SHFT                 },
{ "ror",        CF_CHG1|CF_SHFT                 },
{ "sbc",        CF_USE1                         },
{ "set0",       CF_CHG1                         },
{ "set1",       CF_CHG1                         },
{ "set2",       CF_CHG1                         },
{ "set3",       CF_CHG1                         },
{ "set4",       CF_CHG1                         },
{ "set5",       CF_CHG1                         },
{ "set6",       CF_CHG1                         },
{ "set7",       CF_CHG1                         },
{ "setc",       0                               },
{ "setp",       0                               },
{ "sleep",      0                               },
{ "stop",       CF_STOP                         },
{ "mov",        CF_CHG1|CF_USE2                 },
{ "mov",        CF_CHG1|CF_USE2                 },
{ "mov",        CF_CHG1|CF_USE2                 },
{ "subw",       CF_USE1                         },
{ "mov",        CF_CHG1|CF_USE2                 },
{ "mov",        CF_CHG1|CF_USE2                 },
{ "mov",        CF_CHG1|CF_USE2                 },
{ "mov",        CF_CHG1|CF_USE2                 },
{ "mov",        CF_CHG1|CF_USE2                 },
{ "mov",        CF_CHG1|CF_USE2                 },
{ "tcall",      CF_USE1|CF_CALL                 },
{ "tclr1",      CF_USE1|CF_CHG1                 },
{ "tset1",      CF_USE1|CF_CHG1                 },
{ "xcn",        0                               },

  };

CASSERT(qnumber(Instructions) == SPC_last);


struct addrmode_info_t AddressingModes[] =
{
  {"Absolute"},                                         // ABS
  {"Absolute Indexed X"},                               // ABS_IX,
  {"Absolute Indexed Y"},                               // ABS_IY,
  {"Absolute Indexed Indirect"},                        // ABS_IX_INDIR,
  {"Bitwise Operation"},                                // BIT_OP
  {"Direct Page"},                                      // DP,
  {"Direct Page Indexed X"},                            // DP_IX,
  {"Direct Page Indexed Y"},                            // DP_IY,
  {"Direct Page Indexed X Indirect"},                   // DP_IX_INDIR,
  {"Direct Page Indirect Indexed Y"},                   // DP_INDIR_IY,
  {"Direct Page To Direct Page"},                       // DP_DP,
  {"Direct Page, Program Counter Relative"},            // DP_PC_REL,
  {"Direct Page Indexed X, Program Counter Relative"},  // DP_IX_PC_REL,
  {"Immediate"},                                        // IMM,
  {"Immediate To Direct Page"},                         // IMM_DP,
  {"Implied"},                                          // IMPLIED,
  {"Indirect X"},                                       // INDIR_IX,
  {"Indirect Y"},                                       // INDIR_IY,
  {"Indirect Auto-Increment"},                          // INDIR_IX_INC,
  {"Indirect Page To Indirect Page"},                   // INDIR_IX_IY,
  {"Program Counter Relative"}                          // PC_REL,
};

CASSERT(qnumber(AddressingModes) == ADDRMODE_last);
